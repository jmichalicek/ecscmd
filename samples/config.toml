# This would normally be ~/.ecscmd.toml
# If creating a new task, we need to set more values. They can stay set or be removed
[taskdef.newTask]
profile = "my_aws_profile"  # also needs to be command line option
family = "testTaskDef"
requiresCompatibilities = ["FARGATE"]
cpu = "256"
memory = "512"
template = "samples/containerDefinitions.json"
executionRoleArn = "arn:aws:iam::12345678:role/ecsTaskExecutionRole"
taskRoleArn = "arn:aws:iam::12345678:role/myTaskRole"
[taskdef.newTask.templatevars]
ContainerName = "nginx"
Image = "nginx:latest"
AwsLogsGroup = "/test"
[[taskdef.volumes]]
name = "myvolume"
# This parameter maps to Driver in the Create a volume (https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
driver = "local"
scope = "task" # task or shared
# labels = ["foo", "bar"]
# autoprovision only used if scope is shared
# autoprovision = true
# host is for bindmount - so not going to work with Fargate
# host = "ahost"
# A map of Docker driver-specific options passed through. This parameter maps
# to DriverOpts in the Create a volume (https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
# [taskdef.volumes.driveropts]


# if updating an existing task, fewer options need to be set. AWS will default them to
# that of the previous version of the task definition
[taskdef.existingTask]
family = "testTaskDef"
template = "samples/containerDefinitions.json"
[taskdef.existingTask.templatevars]
ContainerName = "nginx"
Image = "nginx:latest"
AwsLogsGroup = "/test"

[service.sample]
profile = "my_aws_profile"
# Keeping to minimum required for now
name = "testFargateService"
cluster = "testEcsCluster"
taskDefinition = "testTaskDef" # will also be a command line option - that is potentially more frequently desired
# make these a NetworkConfiguration and/or AwsVpcConfiguration subgroup to match the code aws sdk structure?
# or keep it flat?
assignPublicIp = "ENABLED" # Default - disabled. Normally would use load balancer and no public ip here. May need to pull down current configuration, then just updated values which are specified.
securityGroups = ["sg-mysecuritygroup1", "sg-mysecuritygroup2"]  # default is vpc default. test what happens if service has sg's and then I update without specifying this
subnets = ["subnet-mysubnet1"]  # required
# TODO: add other configs
